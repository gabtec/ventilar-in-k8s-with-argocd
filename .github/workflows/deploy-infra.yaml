name: Deploy K8S Cluster

on:
  push:
    branches: ['main']
    paths: ['infra/**']
  workflow_dispatch:

jobs:
  terraform-infra:
    runs-on: ubuntu-22.04
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_AD_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZ_AD_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
      TF_VAR_appId: ${{ secrets.AZ_AD_CLIENT_ID }}
      TF_VAR_password: ${{ secrets.AZ_AD_CLIENT_SECRET }}
    outputs:
      AZ_RGROUP: ${{steps.tfouts.outputs.AZ_RGROUP}}
      AZ_KUB_NAME: ${{steps.tfouts.outputs.AZ_KUB_NAME}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Azure CLI login
        uses: azure/CLI@v1
        with:
          azcliversion: 2.47.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZ_AD_CLIENT_ID }} -p ${{ secrets.AZ_AD_CLIENT_SECRET }} --tenant ${{ secrets.AZ_AD_TENANT_ID }}
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: 1.4.0
          terraform_wrapper: false #will allow output to variables
      - name: Terraform format code
        id: fmt
        run: terraform fmt -recursive -check infra/
        continue-on-error: true
      - name: Warning if tf code not formatted
        if: steps.fmt.outputs.exitcode != 0
        run: echo "[Warning:] Terraform code is not properly formatted."
      - name: Terraform Init
        id: init
        working-directory: ./infra/terraform-k8s-azure
        run: terraform init
      - name: Terraform Validate
        id: validate
        working-directory: ./infra/terraform-k8s-azure
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        working-directory: ./infra/terraform-k8s-azure
        run: terraform plan -no-color
        continue-on-error: true
      - name: Terraform Apply
        id: apply
        working-directory: ./infra/terraform-k8s-azure
        run: terraform apply -auto-approve -no-color
      - name: Set Variables to next job
        id: tfouts
        working-directory: ./infra/terraform-k8s-azure
        run: |
          echo "AZ_RGROUP=$(terraform output resource_group_name)" >> "$GITHUB_OUTPUT"
          echo "AZ_KUB_NAME=$(terraform output kubernetes_cluster_name)" >> "$GITHUB_OUTPUT"
  install-k8s-tools:
    needs: [terraform-infra]
    runs-on: ubuntu-22.04
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_AD_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZ_AD_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
    steps:
      - name: Azure CLI login
        uses: azure/CLI@v1
        with:
          azcliversion: 2.47.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZ_AD_CLIENT_ID }} -p ${{ secrets.AZ_AD_CLIENT_SECRET }} --tenant ${{ secrets.AZ_AD_TENANT_ID }}
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v3
      - uses: azure/aks-set-context@v3
        with:
          resource-group: ${{needs.terraform-infra.outputs.AZ_RGROUP}}
          cluster-name: ${{needs.terraform-infra.outputs.AZ_KUB_NAME}}
          admin: 'false'
          use-kubelogin: 'true'
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
